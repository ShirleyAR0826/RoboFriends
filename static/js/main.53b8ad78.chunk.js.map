{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButtton.js","components/Header.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","index.js","reducers.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","Component","CounterButton","updateCount","setState","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.53b8ad78.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return(\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    console.log('cardList');\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>})\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    console.log('searchBox');\r\n    return(\r\n        <div className='pa2 '>\r\n            <input className='pa3 ba b--green bg-lightest-blue' \r\n            type='search' \r\n            placeholder='Search Robots'\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style= {{overflowY: 'scroll', border: '1px solid green', height: '500px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.state({hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. That is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        if (this.state.count !== nextState){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    updateCount = () =>{\r\n        this.setState(state =>{\r\n            return {count: this.state.count + 1}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('CounterButton');\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButtton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        console.log('Header');\r\n        return <div>\r\n            <CounterButton color={'red'} />\r\n            <h1 className='f1'>RoboFriends</h1>\r\n        </div>\r\n        \r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Header from '../components/Header';\r\n\r\nimport {setSearchField, searchRobots} from '../actions';\r\n\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error        \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(searchRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        return isPending?\r\n        <h1>Loading...</h1>:\r\n        (\r\n            <div className='tc'>\r\n                <Header />\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots} />\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n        }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS} from './constants';\r\n\r\nconst setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nconst searchRobots = () => (dispatch) =>{\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n            .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n\r\nexport {setSearchField, searchRobots};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots});\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>, document.getElementById('root'));\r\n\r\nregisterServiceWorker();\r\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_FAILED} from './constants';\r\n\r\nconst searchRobots = (state={searchField: ''}, action={}) =>{\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst requestRobots = (state={isPending:false, robots:[], error:''}, action={}) =>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport {searchRobots, requestRobots}"],"sourceRoot":""}